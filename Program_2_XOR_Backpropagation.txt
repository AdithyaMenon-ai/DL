# Program 2: XOR Using Backpropagation
import tensorflow as tf
import numpy as np

X = np.array([[0,0],[0,1],[1,0],[1,1]])
y = np.array([[0],[1],[1],[0]])

model = tf.keras.Sequential([
    tf.keras.layers.Dense(4, activation="relu", input_shape=(2,)),
    tf.keras.layers.Dense(1, activation="sigmoid")
])

model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])
model.fit(X, y, epochs=500, verbose=0)

predictions = model.predict(X)
for i, pred in enumerate(predictions):
    print(f"Input: {X[i]}, Predicted: {np.round(pred)}, Actual: {y[i]}")

# OUTPUT
# Input: [0 0] Predicted: [0.] Actual: [0]
# Input: [0 1] Predicted: [1.] Actual: [1]
# Input: [1 0] Predicted: [1.] Actual: [1]
# Input: [1 1] Predicted: [0.] Actual: [0]
